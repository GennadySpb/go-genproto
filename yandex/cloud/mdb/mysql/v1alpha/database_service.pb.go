// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/mysql/v1alpha/database_service.proto

package mysql // import "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1alpha"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/yandex-cloud/go-genproto/yandex/api"
import operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
import _ "github.com/yandex-cloud/go-genproto/yandex/cloud/validation"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "google.golang.org/genproto/protobuf/field_mask"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetDatabaseRequest struct {
	// Required. ID of the MySQL cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required.
	DatabaseName         string   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDatabaseRequest) Reset()         { *m = GetDatabaseRequest{} }
func (m *GetDatabaseRequest) String() string { return proto.CompactTextString(m) }
func (*GetDatabaseRequest) ProtoMessage()    {}
func (*GetDatabaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{0}
}
func (m *GetDatabaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDatabaseRequest.Unmarshal(m, b)
}
func (m *GetDatabaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDatabaseRequest.Marshal(b, m, deterministic)
}
func (dst *GetDatabaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatabaseRequest.Merge(dst, src)
}
func (m *GetDatabaseRequest) XXX_Size() int {
	return xxx_messageInfo_GetDatabaseRequest.Size(m)
}
func (m *GetDatabaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatabaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatabaseRequest proto.InternalMessageInfo

func (m *GetDatabaseRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetDatabaseRequest) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

type ListDatabasesRequest struct {
	// Required. ID of the MySQL cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a `next_page_token` that can be used
	// to get the next page of results in subsequent ListDatabases requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. Set `page_token` to the `next_page_token` returned by a previous ListDatabases
	// request to get the next page of results.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDatabasesRequest) Reset()         { *m = ListDatabasesRequest{} }
func (m *ListDatabasesRequest) String() string { return proto.CompactTextString(m) }
func (*ListDatabasesRequest) ProtoMessage()    {}
func (*ListDatabasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{1}
}
func (m *ListDatabasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDatabasesRequest.Unmarshal(m, b)
}
func (m *ListDatabasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDatabasesRequest.Marshal(b, m, deterministic)
}
func (dst *ListDatabasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDatabasesRequest.Merge(dst, src)
}
func (m *ListDatabasesRequest) XXX_Size() int {
	return xxx_messageInfo_ListDatabasesRequest.Size(m)
}
func (m *ListDatabasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDatabasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDatabasesRequest proto.InternalMessageInfo

func (m *ListDatabasesRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListDatabasesRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListDatabasesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListDatabasesResponse struct {
	// Requested list of MySQL clusters.
	Databases []*Database `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
	// This token allows you to get the next page of results for ListDatabases requests,
	// if the number of results is larger than `page_size` specified in the request.
	// To get the next page, specify the value of `next_page_token` as a value for
	// the `page_token` parameter in the next ListDatabases request. Subsequent ListDatabases
	// requests will have their own `next_page_token` to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDatabasesResponse) Reset()         { *m = ListDatabasesResponse{} }
func (m *ListDatabasesResponse) String() string { return proto.CompactTextString(m) }
func (*ListDatabasesResponse) ProtoMessage()    {}
func (*ListDatabasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{2}
}
func (m *ListDatabasesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDatabasesResponse.Unmarshal(m, b)
}
func (m *ListDatabasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDatabasesResponse.Marshal(b, m, deterministic)
}
func (dst *ListDatabasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDatabasesResponse.Merge(dst, src)
}
func (m *ListDatabasesResponse) XXX_Size() int {
	return xxx_messageInfo_ListDatabasesResponse.Size(m)
}
func (m *ListDatabasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDatabasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDatabasesResponse proto.InternalMessageInfo

func (m *ListDatabasesResponse) GetDatabases() []*Database {
	if m != nil {
		return m.Databases
	}
	return nil
}

func (m *ListDatabasesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateDatabaseRequest struct {
	// Required. ID of the MySQL cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required.
	DatabaseSpec         *DatabaseSpec `protobuf:"bytes,2,opt,name=database_spec,json=databaseSpec,proto3" json:"database_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateDatabaseRequest) Reset()         { *m = CreateDatabaseRequest{} }
func (m *CreateDatabaseRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDatabaseRequest) ProtoMessage()    {}
func (*CreateDatabaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{3}
}
func (m *CreateDatabaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDatabaseRequest.Unmarshal(m, b)
}
func (m *CreateDatabaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDatabaseRequest.Marshal(b, m, deterministic)
}
func (dst *CreateDatabaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatabaseRequest.Merge(dst, src)
}
func (m *CreateDatabaseRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDatabaseRequest.Size(m)
}
func (m *CreateDatabaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatabaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatabaseRequest proto.InternalMessageInfo

func (m *CreateDatabaseRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateDatabaseRequest) GetDatabaseSpec() *DatabaseSpec {
	if m != nil {
		return m.DatabaseSpec
	}
	return nil
}

type CreateDatabaseMetadata struct {
	// Required. ID of the MySQL cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the creating database.
	DatabaseName         string   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDatabaseMetadata) Reset()         { *m = CreateDatabaseMetadata{} }
func (m *CreateDatabaseMetadata) String() string { return proto.CompactTextString(m) }
func (*CreateDatabaseMetadata) ProtoMessage()    {}
func (*CreateDatabaseMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{4}
}
func (m *CreateDatabaseMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDatabaseMetadata.Unmarshal(m, b)
}
func (m *CreateDatabaseMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDatabaseMetadata.Marshal(b, m, deterministic)
}
func (dst *CreateDatabaseMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatabaseMetadata.Merge(dst, src)
}
func (m *CreateDatabaseMetadata) XXX_Size() int {
	return xxx_messageInfo_CreateDatabaseMetadata.Size(m)
}
func (m *CreateDatabaseMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatabaseMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatabaseMetadata proto.InternalMessageInfo

func (m *CreateDatabaseMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateDatabaseMetadata) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

type DeleteDatabaseRequest struct {
	// Required. ID of the MySQL cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the database to delete.
	DatabaseName         string   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDatabaseRequest) Reset()         { *m = DeleteDatabaseRequest{} }
func (m *DeleteDatabaseRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDatabaseRequest) ProtoMessage()    {}
func (*DeleteDatabaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{5}
}
func (m *DeleteDatabaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDatabaseRequest.Unmarshal(m, b)
}
func (m *DeleteDatabaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDatabaseRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteDatabaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDatabaseRequest.Merge(dst, src)
}
func (m *DeleteDatabaseRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDatabaseRequest.Size(m)
}
func (m *DeleteDatabaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDatabaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDatabaseRequest proto.InternalMessageInfo

func (m *DeleteDatabaseRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteDatabaseRequest) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

type DeleteDatabaseMetadata struct {
	// Required. ID of the MySQL cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the deleting database.
	DatabaseName         string   `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDatabaseMetadata) Reset()         { *m = DeleteDatabaseMetadata{} }
func (m *DeleteDatabaseMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteDatabaseMetadata) ProtoMessage()    {}
func (*DeleteDatabaseMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_database_service_3e666e3454bcf04e, []int{6}
}
func (m *DeleteDatabaseMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDatabaseMetadata.Unmarshal(m, b)
}
func (m *DeleteDatabaseMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDatabaseMetadata.Marshal(b, m, deterministic)
}
func (dst *DeleteDatabaseMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDatabaseMetadata.Merge(dst, src)
}
func (m *DeleteDatabaseMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteDatabaseMetadata.Size(m)
}
func (m *DeleteDatabaseMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDatabaseMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDatabaseMetadata proto.InternalMessageInfo

func (m *DeleteDatabaseMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteDatabaseMetadata) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func init() {
	proto.RegisterType((*GetDatabaseRequest)(nil), "yandex.cloud.mdb.mysql.v1alpha.GetDatabaseRequest")
	proto.RegisterType((*ListDatabasesRequest)(nil), "yandex.cloud.mdb.mysql.v1alpha.ListDatabasesRequest")
	proto.RegisterType((*ListDatabasesResponse)(nil), "yandex.cloud.mdb.mysql.v1alpha.ListDatabasesResponse")
	proto.RegisterType((*CreateDatabaseRequest)(nil), "yandex.cloud.mdb.mysql.v1alpha.CreateDatabaseRequest")
	proto.RegisterType((*CreateDatabaseMetadata)(nil), "yandex.cloud.mdb.mysql.v1alpha.CreateDatabaseMetadata")
	proto.RegisterType((*DeleteDatabaseRequest)(nil), "yandex.cloud.mdb.mysql.v1alpha.DeleteDatabaseRequest")
	proto.RegisterType((*DeleteDatabaseMetadata)(nil), "yandex.cloud.mdb.mysql.v1alpha.DeleteDatabaseMetadata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	// Returns the specified MySQL database.
	Get(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*Database, error)
	// Retrieves a list of MySQL databases.
	List(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	// Creates a new MySQL database.
	Create(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified MySQL database.
	Delete(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type databaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseServiceClient(cc *grpc.ClientConn) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) Get(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*Database, error) {
	out := new(Database)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) List(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Create(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Delete(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
type DatabaseServiceServer interface {
	// Returns the specified MySQL database.
	Get(context.Context, *GetDatabaseRequest) (*Database, error)
	// Retrieves a list of MySQL databases.
	List(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	// Creates a new MySQL database.
	Create(context.Context, *CreateDatabaseRequest) (*operation.Operation, error)
	// Deletes the specified MySQL database.
	Delete(context.Context, *DeleteDatabaseRequest) (*operation.Operation, error)
}

func RegisterDatabaseServiceServer(s *grpc.Server, srv DatabaseServiceServer) {
	s.RegisterService(&_DatabaseService_serviceDesc, srv)
}

func _DatabaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Get(ctx, req.(*GetDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).List(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Create(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.mysql.v1alpha.DatabaseService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Delete(ctx, req.(*DeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.mdb.mysql.v1alpha.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DatabaseService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DatabaseService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DatabaseService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DatabaseService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/mdb/mysql/v1alpha/database_service.proto",
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/mysql/v1alpha/database_service.proto", fileDescriptor_database_service_3e666e3454bcf04e)
}

var fileDescriptor_database_service_3e666e3454bcf04e = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x4f, 0x13, 0x4b,
	0x18, 0xce, 0x52, 0x4e, 0x43, 0x07, 0x38, 0x24, 0x93, 0x53, 0xd2, 0x34, 0x07, 0xc2, 0xd9, 0x93,
	0x60, 0x53, 0xdd, 0xaf, 0x22, 0x44, 0x05, 0x4c, 0x2c, 0x08, 0x68, 0x14, 0x4d, 0x31, 0x31, 0x41,
	0x4c, 0x33, 0xed, 0xbe, 0x2c, 0x1b, 0xf6, 0x8b, 0xce, 0x94, 0xf0, 0x11, 0x2e, 0xf4, 0x42, 0x23,
	0xb7, 0x26, 0xde, 0xf9, 0x27, 0xd0, 0xff, 0x00, 0x89, 0x77, 0xf8, 0x17, 0x8c, 0xf1, 0xda, 0x4b,
	0xaf, 0xcc, 0xce, 0x6e, 0x3f, 0x16, 0x0a, 0xad, 0xc0, 0xdd, 0xee, 0xbc, 0xcf, 0x33, 0xf3, 0x3c,
	0x33, 0xcf, 0x3b, 0x83, 0xc6, 0xb7, 0x89, 0xa3, 0xc3, 0x96, 0x52, 0xb6, 0xdc, 0xaa, 0xae, 0xd8,
	0x7a, 0x49, 0xb1, 0xb7, 0xe9, 0x86, 0xa5, 0x6c, 0x6a, 0xc4, 0xf2, 0xd6, 0x88, 0xa2, 0x13, 0x46,
	0x4a, 0x84, 0x42, 0x91, 0x42, 0x65, 0xd3, 0x2c, 0x83, 0xec, 0x55, 0x5c, 0xe6, 0xe2, 0xe1, 0x80,
	0x26, 0x73, 0x9a, 0x6c, 0xeb, 0x25, 0x99, 0xd3, 0xe4, 0x90, 0x96, 0xfe, 0xd7, 0x70, 0x5d, 0xc3,
	0x02, 0x85, 0x78, 0xa6, 0x42, 0x1c, 0xc7, 0x65, 0x84, 0x99, 0xae, 0x43, 0x03, 0x76, 0x7a, 0x24,
	0xac, 0xf2, 0xbf, 0x52, 0x75, 0x55, 0x59, 0x35, 0xc1, 0xd2, 0x8b, 0x36, 0xa1, 0xeb, 0x21, 0x22,
	0x1d, 0xca, 0xf2, 0xf9, 0xae, 0x07, 0x15, 0x4e, 0x0f, 0x6b, 0xa3, 0x11, 0xc9, 0xf5, 0xea, 0x29,
	0xdc, 0x50, 0x04, 0xb7, 0x49, 0x2c, 0x53, 0x6f, 0x2e, 0x4b, 0x1d, 0x3a, 0x0f, 0xe0, 0xe2, 0x1b,
	0x01, 0xe1, 0x79, 0x60, 0xb3, 0xe1, 0x68, 0x01, 0x36, 0xaa, 0x40, 0x19, 0xbe, 0x8e, 0x50, 0xd9,
	0xaa, 0x52, 0x06, 0x95, 0xa2, 0xa9, 0xa7, 0x84, 0x11, 0x21, 0x93, 0xc8, 0xf7, 0xfd, 0x38, 0xd4,
	0x84, 0xfd, 0x23, 0xad, 0x7b, 0x6a, 0x7a, 0x5c, 0x2d, 0x24, 0xc2, 0xfa, 0x03, 0x1d, 0xcf, 0xa0,
	0xfe, 0xfa, 0x7e, 0x3a, 0xc4, 0x86, 0x54, 0x17, 0xc7, 0x0f, 0xfb, 0xf8, 0x9f, 0x87, 0xda, 0xdf,
	0x2f, 0x88, 0xb4, 0x73, 0x4f, 0x5a, 0x56, 0xa5, 0xdb, 0x45, 0xe9, 0x65, 0x36, 0x98, 0x61, 0x62,
	0xac, 0xd0, 0x57, 0x23, 0x2d, 0x12, 0x1b, 0xc4, 0x0f, 0x02, 0xfa, 0xe7, 0x91, 0x49, 0xeb, 0x4a,
	0xe8, 0x85, 0xa4, 0x5c, 0x43, 0x09, 0x8f, 0x18, 0x50, 0xa4, 0xe6, 0x4e, 0x20, 0x23, 0x96, 0x47,
	0xbf, 0x0e, 0xb5, 0xb8, 0x2a, 0x69, 0xaa, 0xaa, 0x16, 0x7a, 0xfc, 0xe2, 0x92, 0xb9, 0x03, 0x38,
	0x83, 0x10, 0x07, 0x32, 0x77, 0x1d, 0x9c, 0x54, 0x8c, 0xcf, 0x9a, 0xd8, 0x3f, 0xd2, 0xfe, 0x9a,
	0x9a, 0xd6, 0x54, 0xb5, 0xc0, 0x67, 0x79, 0xe6, 0xd7, 0xc4, 0xb7, 0x02, 0x4a, 0x9e, 0x10, 0x46,
	0x3d, 0xd7, 0xa1, 0x80, 0xe7, 0x50, 0xa2, 0x66, 0x81, 0xa6, 0x84, 0x91, 0x58, 0xa6, 0x37, 0x97,
	0x91, 0xcf, 0x4f, 0x90, 0x5c, 0xdf, 0xe8, 0x06, 0x15, 0x8f, 0xa2, 0x01, 0x07, 0xb6, 0x58, 0xb1,
	0x49, 0x10, 0xdf, 0xc1, 0x42, 0xbf, 0x3f, 0xfc, 0xb4, 0xae, 0xe4, 0xa3, 0x80, 0x92, 0x33, 0x15,
	0x20, 0x0c, 0x2e, 0x75, 0x5c, 0xcf, 0x9b, 0x8e, 0x8b, 0x7a, 0x50, 0xe6, 0x8b, 0xf5, 0xe6, 0x6e,
	0x74, 0x2a, 0x7d, 0xc9, 0x83, 0x72, 0xbe, 0xdb, 0x9f, 0xbd, 0x71, 0x84, 0xfe, 0x98, 0xb8, 0x82,
	0x06, 0xa3, 0xf2, 0x1e, 0x03, 0x23, 0x3e, 0x02, 0x0f, 0x9d, 0xd6, 0xd7, 0xac, 0xe8, 0xff, 0x96,
	0x01, 0x3a, 0x11, 0x90, 0x77, 0x02, 0x4a, 0xce, 0x82, 0x05, 0x97, 0x74, 0x7f, 0x25, 0x61, 0x5d,
	0x41, 0x83, 0x51, 0x29, 0x57, 0xe9, 0x34, 0xf7, 0x39, 0x8e, 0x06, 0xea, 0x9b, 0x1d, 0xdc, 0x4f,
	0xf8, 0x93, 0x80, 0x62, 0xf3, 0xc0, 0x70, 0xae, 0xdd, 0x29, 0x9d, 0x6e, 0xe6, 0x74, 0xc7, 0xa1,
	0x14, 0x17, 0x5f, 0x7f, 0xfd, 0xf6, 0xbe, 0x6b, 0x01, 0xcf, 0x29, 0x36, 0x71, 0x88, 0x01, 0xba,
	0x14, 0xbd, 0x3c, 0x42, 0x23, 0x54, 0xd9, 0x6d, 0x98, 0xdc, 0xab, 0x5f, 0x29, 0x54, 0xd9, 0x8d,
	0x98, 0xdb, 0xf3, 0x55, 0x77, 0xfb, 0xbd, 0x83, 0x6f, 0xb6, 0x93, 0xd0, 0xaa, 0xf5, 0xd3, 0xe3,
	0x7f, 0xc8, 0x0a, 0xfa, 0x52, 0xbc, 0xcb, 0x5d, 0xdc, 0xc2, 0x13, 0x17, 0x73, 0x81, 0xbf, 0x08,
	0x28, 0x1e, 0x04, 0x19, 0xb7, 0x55, 0xd0, 0xb2, 0x1f, 0xd3, 0xff, 0x45, 0x69, 0x8d, 0x2b, 0xfc,
	0x49, 0xed, 0x4b, 0x34, 0x0e, 0x8e, 0xb3, 0xe2, 0x99, 0x0d, 0xd3, 0x53, 0x1b, 0xe1, 0x56, 0x26,
	0xc5, 0x0b, 0x5a, 0xb9, 0x23, 0x64, 0xf1, 0x77, 0x01, 0xc5, 0x83, 0xb0, 0xb6, 0x77, 0xd3, 0xb2,
	0xbf, 0x3a, 0x71, 0xf3, 0x4a, 0x38, 0x38, 0xce, 0x2a, 0x67, 0x76, 0x45, 0x32, 0x78, 0x19, 0xe5,
	0xda, 0xcb, 0x28, 0xdf, 0xb7, 0x3d, 0xb6, 0x1d, 0x84, 0x2d, 0x7b, 0x45, 0x61, 0xcb, 0x3f, 0x5c,
	0x5e, 0x30, 0x4c, 0xb6, 0x56, 0x2d, 0xc9, 0x65, 0xd7, 0x56, 0x02, 0xc9, 0x52, 0xf0, 0x0c, 0x1a,
	0xae, 0x64, 0x80, 0xc3, 0x57, 0x57, 0xce, 0x7f, 0x1f, 0x27, 0xf9, 0x5f, 0x29, 0xce, 0xb1, 0x63,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x53, 0xfe, 0xef, 0x48, 0x08, 0x00, 0x00,
}
