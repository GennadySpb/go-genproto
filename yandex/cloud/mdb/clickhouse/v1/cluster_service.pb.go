// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/clickhouse/v1/cluster_service.proto

package clickhouse // import "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/yandex-cloud/go-genproto/yandex/api"
import config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1/config"
import operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
import _ "github.com/yandex-cloud/go-genproto/yandex/cloud/validation"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import field_mask "google.golang.org/genproto/protobuf/field_mask"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of ClickHouse activity.
	ListClusterLogsRequest_CLICKHOUSE ListClusterLogsRequest_ServiceType = 1
)

var ListClusterLogsRequest_ServiceType_name = map[int32]string{
	0: "SERVICE_TYPE_UNSPECIFIED",
	1: "CLICKHOUSE",
}
var ListClusterLogsRequest_ServiceType_value = map[string]int32{
	"SERVICE_TYPE_UNSPECIFIED": 0,
	"CLICKHOUSE":               1,
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return proto.EnumName(ListClusterLogsRequest_ServiceType_name, int32(x))
}
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{14, 0}
}

type GetClusterRequest struct {
	// ID of the ClickHouse Cluster resource to return.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterRequest) Reset()         { *m = GetClusterRequest{} }
func (m *GetClusterRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterRequest) ProtoMessage()    {}
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{0}
}
func (m *GetClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterRequest.Unmarshal(m, b)
}
func (m *GetClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterRequest.Marshal(b, m, deterministic)
}
func (dst *GetClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterRequest.Merge(dst, src)
}
func (m *GetClusterRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterRequest.Size(m)
}
func (m *GetClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterRequest proto.InternalMessageInfo

func (m *GetClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	// ID of the folder to list ClickHouse clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
	// returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. The value. Ðœust be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersRequest) Reset()         { *m = ListClustersRequest{} }
func (m *ListClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListClustersRequest) ProtoMessage()    {}
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{1}
}
func (m *ListClustersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersRequest.Unmarshal(m, b)
}
func (m *ListClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersRequest.Marshal(b, m, deterministic)
}
func (dst *ListClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersRequest.Merge(dst, src)
}
func (m *ListClustersRequest) XXX_Size() int {
	return xxx_messageInfo_ListClustersRequest.Size(m)
}
func (m *ListClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersRequest proto.InternalMessageInfo

func (m *ListClustersRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *ListClustersRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClustersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListClustersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListClustersResponse struct {
	// List of ClickHouse Cluster resources.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersResponse) Reset()         { *m = ListClustersResponse{} }
func (m *ListClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListClustersResponse) ProtoMessage()    {}
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{2}
}
func (m *ListClustersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersResponse.Unmarshal(m, b)
}
func (m *ListClustersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersResponse.Marshal(b, m, deterministic)
}
func (dst *ListClustersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersResponse.Merge(dst, src)
}
func (m *ListClustersResponse) XXX_Size() int {
	return xxx_messageInfo_ListClustersResponse.Size(m)
}
func (m *ListClustersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersResponse proto.InternalMessageInfo

func (m *ListClustersResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ListClustersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	// ID of the folder to create the ClickHouse cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the ClickHouse cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the ClickHouse cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the ClickHouse cluster as `` key:value `` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deployment environment of the ClickHouse cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.clickhouse.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the ClickHouse cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Descriptions of databases to be created in the ClickHouse cluster.
	DatabaseSpecs []*DatabaseSpec `protobuf:"bytes,7,rep,name=database_specs,json=databaseSpecs,proto3" json:"database_specs,omitempty"`
	// Descriptions of database users to be created in the ClickHouse cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,8,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// Individual configurations for hosts that should be created for the ClickHouse cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Name of the first shard in cluster. If not set, it defaults to the value 'shard1'.
	ShardName            string   `protobuf:"bytes,11,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterRequest) Reset()         { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()    {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{3}
}
func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterRequest.Unmarshal(m, b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
}
func (dst *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(dst, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateClusterRequest.Size(m)
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

func (m *CreateClusterRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *CreateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if m != nil {
		return m.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (m *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

func (m *CreateClusterRequest) GetDatabaseSpecs() []*DatabaseSpec {
	if m != nil {
		return m.DatabaseSpecs
	}
	return nil
}

func (m *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if m != nil {
		return m.UserSpecs
	}
	return nil
}

func (m *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

func (m *CreateClusterRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *CreateClusterRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type CreateClusterMetadata struct {
	// ID of the ClickHouse cluster that is being created.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterMetadata) Reset()         { *m = CreateClusterMetadata{} }
func (m *CreateClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMetadata) ProtoMessage()    {}
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{4}
}
func (m *CreateClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMetadata.Unmarshal(m, b)
}
func (m *CreateClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMetadata.Marshal(b, m, deterministic)
}
func (dst *CreateClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMetadata.Merge(dst, src)
}
func (m *CreateClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMetadata.Size(m)
}
func (m *CreateClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMetadata proto.InternalMessageInfo

func (m *CreateClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	// ID of the ClickHouse Cluster resource to update.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the ClickHouse Cluster resource should be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the ClickHouse cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the ClickHouse cluster as `` key:value `` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec           *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateClusterRequest) Reset()         { *m = UpdateClusterRequest{} }
func (m *UpdateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterRequest) ProtoMessage()    {}
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{5}
}
func (m *UpdateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterRequest.Unmarshal(m, b)
}
func (m *UpdateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterRequest.Merge(dst, src)
}
func (m *UpdateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterRequest.Size(m)
}
func (m *UpdateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterRequest proto.InternalMessageInfo

func (m *UpdateClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpdateClusterRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

type UpdateClusterMetadata struct {
	// ID of the ClickHouse Cluster resource that is being updated.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateClusterMetadata) Reset()         { *m = UpdateClusterMetadata{} }
func (m *UpdateClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterMetadata) ProtoMessage()    {}
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{6}
}
func (m *UpdateClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterMetadata.Unmarshal(m, b)
}
func (m *UpdateClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterMetadata.Marshal(b, m, deterministic)
}
func (dst *UpdateClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterMetadata.Merge(dst, src)
}
func (m *UpdateClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterMetadata.Size(m)
}
func (m *UpdateClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterMetadata proto.InternalMessageInfo

func (m *UpdateClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	// ID of the ClickHouse cluster to delete.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterRequest) Reset()         { *m = DeleteClusterRequest{} }
func (m *DeleteClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterRequest) ProtoMessage()    {}
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{7}
}
func (m *DeleteClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterRequest.Unmarshal(m, b)
}
func (m *DeleteClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterRequest.Merge(dst, src)
}
func (m *DeleteClusterRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterRequest.Size(m)
}
func (m *DeleteClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterRequest proto.InternalMessageInfo

func (m *DeleteClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	// ID of the ClickHouse cluster that is being deleted.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterMetadata) Reset()         { *m = DeleteClusterMetadata{} }
func (m *DeleteClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterMetadata) ProtoMessage()    {}
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{8}
}
func (m *DeleteClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterMetadata.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterMetadata.Merge(dst, src)
}
func (m *DeleteClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterMetadata.Size(m)
}
func (m *DeleteClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterMetadata proto.InternalMessageInfo

func (m *DeleteClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type BackupClusterRequest struct {
	// ID of the ClickHouse cluster to back up.
	// To get the ClickHouse cluster ID use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupClusterRequest) Reset()         { *m = BackupClusterRequest{} }
func (m *BackupClusterRequest) String() string { return proto.CompactTextString(m) }
func (*BackupClusterRequest) ProtoMessage()    {}
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{9}
}
func (m *BackupClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupClusterRequest.Unmarshal(m, b)
}
func (m *BackupClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupClusterRequest.Marshal(b, m, deterministic)
}
func (dst *BackupClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupClusterRequest.Merge(dst, src)
}
func (m *BackupClusterRequest) XXX_Size() int {
	return xxx_messageInfo_BackupClusterRequest.Size(m)
}
func (m *BackupClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupClusterRequest proto.InternalMessageInfo

func (m *BackupClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	// ID of the ClickHouse cluster that is being backed up.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupClusterMetadata) Reset()         { *m = BackupClusterMetadata{} }
func (m *BackupClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*BackupClusterMetadata) ProtoMessage()    {}
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{10}
}
func (m *BackupClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupClusterMetadata.Unmarshal(m, b)
}
func (m *BackupClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupClusterMetadata.Marshal(b, m, deterministic)
}
func (dst *BackupClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupClusterMetadata.Merge(dst, src)
}
func (m *BackupClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_BackupClusterMetadata.Size(m)
}
func (m *BackupClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BackupClusterMetadata proto.InternalMessageInfo

func (m *BackupClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	// ID of the backup to create a cluster from.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Name of the new ClickHouse cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new ClickHouse cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the ClickHouse cluster as `` key:value `` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deployment environment of the new ClickHouse cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.clickhouse.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the ClickHouse cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for ClickHouse hosts that should be created for
	// the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the ClickHouse cluster in.
	NetworkId            string   `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreClusterRequest) Reset()         { *m = RestoreClusterRequest{} }
func (m *RestoreClusterRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreClusterRequest) ProtoMessage()    {}
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{11}
}
func (m *RestoreClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreClusterRequest.Unmarshal(m, b)
}
func (m *RestoreClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreClusterRequest.Marshal(b, m, deterministic)
}
func (dst *RestoreClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreClusterRequest.Merge(dst, src)
}
func (m *RestoreClusterRequest) XXX_Size() int {
	return xxx_messageInfo_RestoreClusterRequest.Size(m)
}
func (m *RestoreClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreClusterRequest proto.InternalMessageInfo

func (m *RestoreClusterRequest) GetBackupId() string {
	if m != nil {
		return m.BackupId
	}
	return ""
}

func (m *RestoreClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RestoreClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RestoreClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if m != nil {
		return m.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (m *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

func (m *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

func (m *RestoreClusterRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

type RestoreClusterMetadata struct {
	// ID of the new ClickHouse cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId             string   `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreClusterMetadata) Reset()         { *m = RestoreClusterMetadata{} }
func (m *RestoreClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*RestoreClusterMetadata) ProtoMessage()    {}
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{12}
}
func (m *RestoreClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreClusterMetadata.Unmarshal(m, b)
}
func (m *RestoreClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreClusterMetadata.Marshal(b, m, deterministic)
}
func (dst *RestoreClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreClusterMetadata.Merge(dst, src)
}
func (m *RestoreClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_RestoreClusterMetadata.Size(m)
}
func (m *RestoreClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreClusterMetadata proto.InternalMessageInfo

func (m *RestoreClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *RestoreClusterMetadata) GetBackupId() string {
	if m != nil {
		return m.BackupId
	}
	return ""
}

type LogRecord struct {
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message              map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{13}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRecord.Unmarshal(m, b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
}
func (dst *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(dst, src)
}
func (m *LogRecord) XXX_Size() int {
	return xxx_messageInfo_LogRecord.Size(m)
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogRecord) GetMessage() map[string]string {
	if m != nil {
		return m.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	// ID of the ClickHouse cluster to request logs for.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	FromTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ToTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterLogsResponse.next_page_token]
	// returned by a previous list request.
	PageToken            string   `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterLogsRequest) Reset()         { *m = ListClusterLogsRequest{} }
func (m *ListClusterLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterLogsRequest) ProtoMessage()    {}
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{14}
}
func (m *ListClusterLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterLogsRequest.Unmarshal(m, b)
}
func (m *ListClusterLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterLogsRequest.Marshal(b, m, deterministic)
}
func (dst *ListClusterLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterLogsRequest.Merge(dst, src)
}
func (m *ListClusterLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterLogsRequest.Size(m)
}
func (m *ListClusterLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterLogsRequest proto.InternalMessageInfo

func (m *ListClusterLogsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterLogsRequest) GetColumnFilter() []string {
	if m != nil {
		return m.ColumnFilter
	}
	return nil
}

func (m *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (m *ListClusterLogsRequest) GetFromTime() *timestamp.Timestamp {
	if m != nil {
		return m.FromTime
	}
	return nil
}

func (m *ListClusterLogsRequest) GetToTime() *timestamp.Timestamp {
	if m != nil {
		return m.ToTime
	}
	return nil
}

func (m *ListClusterLogsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterLogsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterLogsResponse struct {
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterLogsResponse) Reset()         { *m = ListClusterLogsResponse{} }
func (m *ListClusterLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterLogsResponse) ProtoMessage()    {}
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{15}
}
func (m *ListClusterLogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterLogsResponse.Unmarshal(m, b)
}
func (m *ListClusterLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterLogsResponse.Marshal(b, m, deterministic)
}
func (dst *ListClusterLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterLogsResponse.Merge(dst, src)
}
func (m *ListClusterLogsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterLogsResponse.Size(m)
}
func (m *ListClusterLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterLogsResponse proto.InternalMessageInfo

func (m *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ListClusterLogsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterOperationsRequest struct {
	// ID of the ClickHouse Cluster resource to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
	// returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterOperationsRequest) Reset()         { *m = ListClusterOperationsRequest{} }
func (m *ListClusterOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterOperationsRequest) ProtoMessage()    {}
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{16}
}
func (m *ListClusterOperationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterOperationsRequest.Unmarshal(m, b)
}
func (m *ListClusterOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterOperationsRequest.Marshal(b, m, deterministic)
}
func (dst *ListClusterOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterOperationsRequest.Merge(dst, src)
}
func (m *ListClusterOperationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterOperationsRequest.Size(m)
}
func (m *ListClusterOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterOperationsRequest proto.InternalMessageInfo

func (m *ListClusterOperationsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterOperationsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterOperationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	// List of Operation resources for the specified ClickHouse cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterOperationsResponse) Reset()         { *m = ListClusterOperationsResponse{} }
func (m *ListClusterOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterOperationsResponse) ProtoMessage()    {}
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{17}
}
func (m *ListClusterOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterOperationsResponse.Unmarshal(m, b)
}
func (m *ListClusterOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterOperationsResponse.Marshal(b, m, deterministic)
}
func (dst *ListClusterOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterOperationsResponse.Merge(dst, src)
}
func (m *ListClusterOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterOperationsResponse.Size(m)
}
func (m *ListClusterOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterOperationsResponse proto.InternalMessageInfo

func (m *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ListClusterOperationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	// ID of the ClickHouse cluster.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterBackupsResponse.next_page_token] returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterBackupsRequest) Reset()         { *m = ListClusterBackupsRequest{} }
func (m *ListClusterBackupsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterBackupsRequest) ProtoMessage()    {}
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{18}
}
func (m *ListClusterBackupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterBackupsRequest.Unmarshal(m, b)
}
func (m *ListClusterBackupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterBackupsRequest.Marshal(b, m, deterministic)
}
func (dst *ListClusterBackupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterBackupsRequest.Merge(dst, src)
}
func (m *ListClusterBackupsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterBackupsRequest.Size(m)
}
func (m *ListClusterBackupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterBackupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterBackupsRequest proto.InternalMessageInfo

func (m *ListClusterBackupsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterBackupsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterBackupsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	// List of ClickHouse Backup resources.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterBackupsResponse) Reset()         { *m = ListClusterBackupsResponse{} }
func (m *ListClusterBackupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterBackupsResponse) ProtoMessage()    {}
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{19}
}
func (m *ListClusterBackupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterBackupsResponse.Unmarshal(m, b)
}
func (m *ListClusterBackupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterBackupsResponse.Marshal(b, m, deterministic)
}
func (dst *ListClusterBackupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterBackupsResponse.Merge(dst, src)
}
func (m *ListClusterBackupsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterBackupsResponse.Size(m)
}
func (m *ListClusterBackupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterBackupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterBackupsResponse proto.InternalMessageInfo

func (m *ListClusterBackupsResponse) GetBackups() []*Backup {
	if m != nil {
		return m.Backups
	}
	return nil
}

func (m *ListClusterBackupsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	// ID of the ClickHouse cluster.
	// To get the ClickHouse cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
	// returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterHostsRequest) Reset()         { *m = ListClusterHostsRequest{} }
func (m *ListClusterHostsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterHostsRequest) ProtoMessage()    {}
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{20}
}
func (m *ListClusterHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterHostsRequest.Unmarshal(m, b)
}
func (m *ListClusterHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterHostsRequest.Marshal(b, m, deterministic)
}
func (dst *ListClusterHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterHostsRequest.Merge(dst, src)
}
func (m *ListClusterHostsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterHostsRequest.Size(m)
}
func (m *ListClusterHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterHostsRequest proto.InternalMessageInfo

func (m *ListClusterHostsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterHostsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterHostsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	// Requested list of hosts for the cluster.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterHostsResponse) Reset()         { *m = ListClusterHostsResponse{} }
func (m *ListClusterHostsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterHostsResponse) ProtoMessage()    {}
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{21}
}
func (m *ListClusterHostsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterHostsResponse.Unmarshal(m, b)
}
func (m *ListClusterHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterHostsResponse.Marshal(b, m, deterministic)
}
func (dst *ListClusterHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterHostsResponse.Merge(dst, src)
}
func (m *ListClusterHostsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterHostsResponse.Size(m)
}
func (m *ListClusterHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterHostsResponse proto.InternalMessageInfo

func (m *ListClusterHostsResponse) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *ListClusterHostsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	// ID of the ClickHouse cluster to add hosts to.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for ClickHouse hosts that should be added to the cluster.
	HostSpecs            []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddClusterHostsRequest) Reset()         { *m = AddClusterHostsRequest{} }
func (m *AddClusterHostsRequest) String() string { return proto.CompactTextString(m) }
func (*AddClusterHostsRequest) ProtoMessage()    {}
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{22}
}
func (m *AddClusterHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterHostsRequest.Unmarshal(m, b)
}
func (m *AddClusterHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterHostsRequest.Marshal(b, m, deterministic)
}
func (dst *AddClusterHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterHostsRequest.Merge(dst, src)
}
func (m *AddClusterHostsRequest) XXX_Size() int {
	return xxx_messageInfo_AddClusterHostsRequest.Size(m)
}
func (m *AddClusterHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterHostsRequest proto.InternalMessageInfo

func (m *AddClusterHostsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

type AddClusterHostsMetadata struct {
	// ID of the ClickHouse cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames            []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddClusterHostsMetadata) Reset()         { *m = AddClusterHostsMetadata{} }
func (m *AddClusterHostsMetadata) String() string { return proto.CompactTextString(m) }
func (*AddClusterHostsMetadata) ProtoMessage()    {}
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{23}
}
func (m *AddClusterHostsMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterHostsMetadata.Unmarshal(m, b)
}
func (m *AddClusterHostsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterHostsMetadata.Marshal(b, m, deterministic)
}
func (dst *AddClusterHostsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterHostsMetadata.Merge(dst, src)
}
func (m *AddClusterHostsMetadata) XXX_Size() int {
	return xxx_messageInfo_AddClusterHostsMetadata.Size(m)
}
func (m *AddClusterHostsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterHostsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterHostsMetadata proto.InternalMessageInfo

func (m *AddClusterHostsMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterHostsMetadata) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

type DeleteClusterHostsRequest struct {
	// ID of the ClickHouse cluster to remove hosts from.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames            []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterHostsRequest) Reset()         { *m = DeleteClusterHostsRequest{} }
func (m *DeleteClusterHostsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterHostsRequest) ProtoMessage()    {}
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{24}
}
func (m *DeleteClusterHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterHostsRequest.Unmarshal(m, b)
}
func (m *DeleteClusterHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterHostsRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterHostsRequest.Merge(dst, src)
}
func (m *DeleteClusterHostsRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterHostsRequest.Size(m)
}
func (m *DeleteClusterHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterHostsRequest proto.InternalMessageInfo

func (m *DeleteClusterHostsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterHostsRequest) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	// ID of the ClickHouse cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames            []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterHostsMetadata) Reset()         { *m = DeleteClusterHostsMetadata{} }
func (m *DeleteClusterHostsMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterHostsMetadata) ProtoMessage()    {}
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{25}
}
func (m *DeleteClusterHostsMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterHostsMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterHostsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterHostsMetadata.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterHostsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterHostsMetadata.Merge(dst, src)
}
func (m *DeleteClusterHostsMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterHostsMetadata.Size(m)
}
func (m *DeleteClusterHostsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterHostsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterHostsMetadata proto.InternalMessageInfo

func (m *DeleteClusterHostsMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterHostsMetadata) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

type GetClusterShardRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterShardRequest) Reset()         { *m = GetClusterShardRequest{} }
func (m *GetClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterShardRequest) ProtoMessage()    {}
func (*GetClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{26}
}
func (m *GetClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterShardRequest.Unmarshal(m, b)
}
func (m *GetClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterShardRequest.Marshal(b, m, deterministic)
}
func (dst *GetClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterShardRequest.Merge(dst, src)
}
func (m *GetClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterShardRequest.Size(m)
}
func (m *GetClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterShardRequest proto.InternalMessageInfo

func (m *GetClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type ListClusterShardsRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	PageSize             int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterShardsRequest) Reset()         { *m = ListClusterShardsRequest{} }
func (m *ListClusterShardsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterShardsRequest) ProtoMessage()    {}
func (*ListClusterShardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{27}
}
func (m *ListClusterShardsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterShardsRequest.Unmarshal(m, b)
}
func (m *ListClusterShardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterShardsRequest.Marshal(b, m, deterministic)
}
func (dst *ListClusterShardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterShardsRequest.Merge(dst, src)
}
func (m *ListClusterShardsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterShardsRequest.Size(m)
}
func (m *ListClusterShardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterShardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterShardsRequest proto.InternalMessageInfo

func (m *ListClusterShardsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterShardsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterShardsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterShardsResponse struct {
	Shards               []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterShardsResponse) Reset()         { *m = ListClusterShardsResponse{} }
func (m *ListClusterShardsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterShardsResponse) ProtoMessage()    {}
func (*ListClusterShardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{28}
}
func (m *ListClusterShardsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterShardsResponse.Unmarshal(m, b)
}
func (m *ListClusterShardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterShardsResponse.Marshal(b, m, deterministic)
}
func (dst *ListClusterShardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterShardsResponse.Merge(dst, src)
}
func (m *ListClusterShardsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterShardsResponse.Size(m)
}
func (m *ListClusterShardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterShardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterShardsResponse proto.InternalMessageInfo

func (m *ListClusterShardsResponse) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *ListClusterShardsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type AddClusterShardRequest struct {
	ClusterId            string           `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string           `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	ConfigSpec           *ShardConfigSpec `protobuf:"bytes,3,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	HostSpecs            []*HostSpec      `protobuf:"bytes,4,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AddClusterShardRequest) Reset()         { *m = AddClusterShardRequest{} }
func (m *AddClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*AddClusterShardRequest) ProtoMessage()    {}
func (*AddClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{29}
}
func (m *AddClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterShardRequest.Unmarshal(m, b)
}
func (m *AddClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterShardRequest.Marshal(b, m, deterministic)
}
func (dst *AddClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterShardRequest.Merge(dst, src)
}
func (m *AddClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_AddClusterShardRequest.Size(m)
}
func (m *AddClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterShardRequest proto.InternalMessageInfo

func (m *AddClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

func (m *AddClusterShardRequest) GetConfigSpec() *ShardConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

func (m *AddClusterShardRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

type AddClusterShardMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddClusterShardMetadata) Reset()         { *m = AddClusterShardMetadata{} }
func (m *AddClusterShardMetadata) String() string { return proto.CompactTextString(m) }
func (*AddClusterShardMetadata) ProtoMessage()    {}
func (*AddClusterShardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{30}
}
func (m *AddClusterShardMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterShardMetadata.Unmarshal(m, b)
}
func (m *AddClusterShardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterShardMetadata.Marshal(b, m, deterministic)
}
func (dst *AddClusterShardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterShardMetadata.Merge(dst, src)
}
func (m *AddClusterShardMetadata) XXX_Size() int {
	return xxx_messageInfo_AddClusterShardMetadata.Size(m)
}
func (m *AddClusterShardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterShardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterShardMetadata proto.InternalMessageInfo

func (m *AddClusterShardMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterShardMetadata) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type UpdateClusterShardRequest struct {
	ClusterId            string                `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string                `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	ConfigSpec           *ShardConfigSpec      `protobuf:"bytes,4,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateClusterShardRequest) Reset()         { *m = UpdateClusterShardRequest{} }
func (m *UpdateClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterShardRequest) ProtoMessage()    {}
func (*UpdateClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{31}
}
func (m *UpdateClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterShardRequest.Unmarshal(m, b)
}
func (m *UpdateClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterShardRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterShardRequest.Merge(dst, src)
}
func (m *UpdateClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterShardRequest.Size(m)
}
func (m *UpdateClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterShardRequest proto.InternalMessageInfo

func (m *UpdateClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpdateClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

func (m *UpdateClusterShardRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateClusterShardRequest) GetConfigSpec() *ShardConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

type UpdateClusterShardMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateClusterShardMetadata) Reset()         { *m = UpdateClusterShardMetadata{} }
func (m *UpdateClusterShardMetadata) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterShardMetadata) ProtoMessage()    {}
func (*UpdateClusterShardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{32}
}
func (m *UpdateClusterShardMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterShardMetadata.Unmarshal(m, b)
}
func (m *UpdateClusterShardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterShardMetadata.Marshal(b, m, deterministic)
}
func (dst *UpdateClusterShardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterShardMetadata.Merge(dst, src)
}
func (m *UpdateClusterShardMetadata) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterShardMetadata.Size(m)
}
func (m *UpdateClusterShardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterShardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterShardMetadata proto.InternalMessageInfo

func (m *UpdateClusterShardMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpdateClusterShardMetadata) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type DeleteClusterShardRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterShardRequest) Reset()         { *m = DeleteClusterShardRequest{} }
func (m *DeleteClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterShardRequest) ProtoMessage()    {}
func (*DeleteClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{33}
}
func (m *DeleteClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterShardRequest.Unmarshal(m, b)
}
func (m *DeleteClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterShardRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterShardRequest.Merge(dst, src)
}
func (m *DeleteClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterShardRequest.Size(m)
}
func (m *DeleteClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterShardRequest proto.InternalMessageInfo

func (m *DeleteClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type DeleteClusterShardMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterShardMetadata) Reset()         { *m = DeleteClusterShardMetadata{} }
func (m *DeleteClusterShardMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterShardMetadata) ProtoMessage()    {}
func (*DeleteClusterShardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{34}
}
func (m *DeleteClusterShardMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterShardMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterShardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterShardMetadata.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterShardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterShardMetadata.Merge(dst, src)
}
func (m *DeleteClusterShardMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterShardMetadata.Size(m)
}
func (m *DeleteClusterShardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterShardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterShardMetadata proto.InternalMessageInfo

func (m *DeleteClusterShardMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterShardMetadata) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type HostSpec struct {
	// ID of the availability zone where the host resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Type of the host to be deployed.
	Type Host_Type `protobuf:"varint,2,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.Host_Type" json:"type,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part
	// of the network that the cluster belongs to.
	// The ID of the network is set in the [Cluster.network_id] field.
	SubnetId string `protobuf:"bytes,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Whether the host should get a public IP address on creation.
	//
	// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
	// a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
	//
	// Possible values:
	// * false â€” don't assign a public IP to the host.
	// * true â€” the host should have a public IP address.
	AssignPublicIp       bool     `protobuf:"varint,4,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	ShardName            string   `protobuf:"bytes,5,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSpec) Reset()         { *m = HostSpec{} }
func (m *HostSpec) String() string { return proto.CompactTextString(m) }
func (*HostSpec) ProtoMessage()    {}
func (*HostSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{35}
}
func (m *HostSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSpec.Unmarshal(m, b)
}
func (m *HostSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSpec.Marshal(b, m, deterministic)
}
func (dst *HostSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSpec.Merge(dst, src)
}
func (m *HostSpec) XXX_Size() int {
	return xxx_messageInfo_HostSpec.Size(m)
}
func (m *HostSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HostSpec proto.InternalMessageInfo

func (m *HostSpec) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *HostSpec) GetType() Host_Type {
	if m != nil {
		return m.Type
	}
	return Host_TYPE_UNSPECIFIED
}

func (m *HostSpec) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *HostSpec) GetAssignPublicIp() bool {
	if m != nil {
		return m.AssignPublicIp
	}
	return false
}

func (m *HostSpec) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type ConfigSpec struct {
	// Configuration and resources for a ClickHouse server.
	Clickhouse *ConfigSpec_Clickhouse `protobuf:"bytes,1,opt,name=clickhouse,proto3" json:"clickhouse,omitempty"`
	// Configuration and resources for a ZooKeeper server.
	Zookeeper            *ConfigSpec_Zookeeper `protobuf:"bytes,2,opt,name=zookeeper,proto3" json:"zookeeper,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ConfigSpec) Reset()         { *m = ConfigSpec{} }
func (m *ConfigSpec) String() string { return proto.CompactTextString(m) }
func (*ConfigSpec) ProtoMessage()    {}
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{36}
}
func (m *ConfigSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSpec.Unmarshal(m, b)
}
func (m *ConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSpec.Marshal(b, m, deterministic)
}
func (dst *ConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSpec.Merge(dst, src)
}
func (m *ConfigSpec) XXX_Size() int {
	return xxx_messageInfo_ConfigSpec.Size(m)
}
func (m *ConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSpec proto.InternalMessageInfo

func (m *ConfigSpec) GetClickhouse() *ConfigSpec_Clickhouse {
	if m != nil {
		return m.Clickhouse
	}
	return nil
}

func (m *ConfigSpec) GetZookeeper() *ConfigSpec_Zookeeper {
	if m != nil {
		return m.Zookeeper
	}
	return nil
}

type ConfigSpec_Clickhouse struct {
	// Configuration for a ClickHouse server.
	Config *config.ClickhouseConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to ClickHouse hosts.
	Resources            *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfigSpec_Clickhouse) Reset()         { *m = ConfigSpec_Clickhouse{} }
func (m *ConfigSpec_Clickhouse) String() string { return proto.CompactTextString(m) }
func (*ConfigSpec_Clickhouse) ProtoMessage()    {}
func (*ConfigSpec_Clickhouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{36, 0}
}
func (m *ConfigSpec_Clickhouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSpec_Clickhouse.Unmarshal(m, b)
}
func (m *ConfigSpec_Clickhouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSpec_Clickhouse.Marshal(b, m, deterministic)
}
func (dst *ConfigSpec_Clickhouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSpec_Clickhouse.Merge(dst, src)
}
func (m *ConfigSpec_Clickhouse) XXX_Size() int {
	return xxx_messageInfo_ConfigSpec_Clickhouse.Size(m)
}
func (m *ConfigSpec_Clickhouse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSpec_Clickhouse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSpec_Clickhouse proto.InternalMessageInfo

func (m *ConfigSpec_Clickhouse) GetConfig() *config.ClickhouseConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConfigSpec_Clickhouse) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type ConfigSpec_Zookeeper struct {
	// Resources allocated to ZooKeeper hosts.
	Resources            *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfigSpec_Zookeeper) Reset()         { *m = ConfigSpec_Zookeeper{} }
func (m *ConfigSpec_Zookeeper) String() string { return proto.CompactTextString(m) }
func (*ConfigSpec_Zookeeper) ProtoMessage()    {}
func (*ConfigSpec_Zookeeper) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{36, 1}
}
func (m *ConfigSpec_Zookeeper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSpec_Zookeeper.Unmarshal(m, b)
}
func (m *ConfigSpec_Zookeeper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSpec_Zookeeper.Marshal(b, m, deterministic)
}
func (dst *ConfigSpec_Zookeeper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSpec_Zookeeper.Merge(dst, src)
}
func (m *ConfigSpec_Zookeeper) XXX_Size() int {
	return xxx_messageInfo_ConfigSpec_Zookeeper.Size(m)
}
func (m *ConfigSpec_Zookeeper) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSpec_Zookeeper.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSpec_Zookeeper proto.InternalMessageInfo

func (m *ConfigSpec_Zookeeper) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type ShardConfigSpec struct {
	Clickhouse           *ShardConfigSpec_Clickhouse `protobuf:"bytes,1,opt,name=clickhouse,proto3" json:"clickhouse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ShardConfigSpec) Reset()         { *m = ShardConfigSpec{} }
func (m *ShardConfigSpec) String() string { return proto.CompactTextString(m) }
func (*ShardConfigSpec) ProtoMessage()    {}
func (*ShardConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{37}
}
func (m *ShardConfigSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardConfigSpec.Unmarshal(m, b)
}
func (m *ShardConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardConfigSpec.Marshal(b, m, deterministic)
}
func (dst *ShardConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardConfigSpec.Merge(dst, src)
}
func (m *ShardConfigSpec) XXX_Size() int {
	return xxx_messageInfo_ShardConfigSpec.Size(m)
}
func (m *ShardConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ShardConfigSpec proto.InternalMessageInfo

func (m *ShardConfigSpec) GetClickhouse() *ShardConfigSpec_Clickhouse {
	if m != nil {
		return m.Clickhouse
	}
	return nil
}

type ShardConfigSpec_Clickhouse struct {
	Config               *config.ClickhouseConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Resources            *Resources               `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Weight               *wrappers.Int64Value     `protobuf:"bytes,3,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ShardConfigSpec_Clickhouse) Reset()         { *m = ShardConfigSpec_Clickhouse{} }
func (m *ShardConfigSpec_Clickhouse) String() string { return proto.CompactTextString(m) }
func (*ShardConfigSpec_Clickhouse) ProtoMessage()    {}
func (*ShardConfigSpec_Clickhouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_service_b9bfaff329d2f776, []int{37, 0}
}
func (m *ShardConfigSpec_Clickhouse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardConfigSpec_Clickhouse.Unmarshal(m, b)
}
func (m *ShardConfigSpec_Clickhouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardConfigSpec_Clickhouse.Marshal(b, m, deterministic)
}
func (dst *ShardConfigSpec_Clickhouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardConfigSpec_Clickhouse.Merge(dst, src)
}
func (m *ShardConfigSpec_Clickhouse) XXX_Size() int {
	return xxx_messageInfo_ShardConfigSpec_Clickhouse.Size(m)
}
func (m *ShardConfigSpec_Clickhouse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardConfigSpec_Clickhouse.DiscardUnknown(m)
}

var xxx_messageInfo_ShardConfigSpec_Clickhouse proto.InternalMessageInfo

func (m *ShardConfigSpec_Clickhouse) GetConfig() *config.ClickhouseConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ShardConfigSpec_Clickhouse) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ShardConfigSpec_Clickhouse) GetWeight() *wrappers.Int64Value {
	if m != nil {
		return m.Weight
	}
	return nil
}

func init() {
	proto.RegisterType((*GetClusterRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.GetClusterRequest")
	proto.RegisterType((*ListClustersRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClustersRequest")
	proto.RegisterType((*ListClustersResponse)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClustersResponse")
	proto.RegisterType((*CreateClusterRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.LabelsEntry")
	proto.RegisterType((*CreateClusterMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.CreateClusterMetadata")
	proto.RegisterType((*UpdateClusterRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.LabelsEntry")
	proto.RegisterType((*UpdateClusterMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.UpdateClusterMetadata")
	proto.RegisterType((*DeleteClusterRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.DeleteClusterRequest")
	proto.RegisterType((*DeleteClusterMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.DeleteClusterMetadata")
	proto.RegisterType((*BackupClusterRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.BackupClusterRequest")
	proto.RegisterType((*BackupClusterMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.BackupClusterMetadata")
	proto.RegisterType((*RestoreClusterRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.LabelsEntry")
	proto.RegisterType((*RestoreClusterMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.RestoreClusterMetadata")
	proto.RegisterType((*LogRecord)(nil), "yandex.cloud.mdb.clickhouse.v1.LogRecord")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.clickhouse.v1.LogRecord.MessageEntry")
	proto.RegisterType((*ListClusterLogsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest")
	proto.RegisterType((*ListClusterLogsResponse)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterLogsResponse")
	proto.RegisterType((*ListClusterOperationsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsRequest")
	proto.RegisterType((*ListClusterOperationsResponse)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsResponse")
	proto.RegisterType((*ListClusterBackupsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsRequest")
	proto.RegisterType((*ListClusterBackupsResponse)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsResponse")
	proto.RegisterType((*ListClusterHostsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterHostsRequest")
	proto.RegisterType((*ListClusterHostsResponse)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterHostsResponse")
	proto.RegisterType((*AddClusterHostsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.AddClusterHostsRequest")
	proto.RegisterType((*AddClusterHostsMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.AddClusterHostsMetadata")
	proto.RegisterType((*DeleteClusterHostsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.DeleteClusterHostsRequest")
	proto.RegisterType((*DeleteClusterHostsMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.DeleteClusterHostsMetadata")
	proto.RegisterType((*GetClusterShardRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.GetClusterShardRequest")
	proto.RegisterType((*ListClusterShardsRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterShardsRequest")
	proto.RegisterType((*ListClusterShardsResponse)(nil), "yandex.cloud.mdb.clickhouse.v1.ListClusterShardsResponse")
	proto.RegisterType((*AddClusterShardRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest")
	proto.RegisterType((*AddClusterShardMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.AddClusterShardMetadata")
	proto.RegisterType((*UpdateClusterShardRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardRequest")
	proto.RegisterType((*UpdateClusterShardMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardMetadata")
	proto.RegisterType((*DeleteClusterShardRequest)(nil), "yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardRequest")
	proto.RegisterType((*DeleteClusterShardMetadata)(nil), "yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardMetadata")
	proto.RegisterType((*HostSpec)(nil), "yandex.cloud.mdb.clickhouse.v1.HostSpec")
	proto.RegisterType((*ConfigSpec)(nil), "yandex.cloud.mdb.clickhouse.v1.ConfigSpec")
	proto.RegisterType((*ConfigSpec_Clickhouse)(nil), "yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Clickhouse")
	proto.RegisterType((*ConfigSpec_Zookeeper)(nil), "yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Zookeeper")
	proto.RegisterType((*ShardConfigSpec)(nil), "yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec")
	proto.RegisterType((*ShardConfigSpec_Clickhouse)(nil), "yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse")
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest_ServiceType", ListClusterLogsRequest_ServiceType_name, ListClusterLogsRequest_ServiceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterServiceClient interface {
	// Returns the specified ClickHouse Cluster resource.
	//
	// To get the list of available ClickHouse Cluster resources, make a [List] request.
	Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Retrieves a list of ClickHouse Cluster resources that belong
	// to the specified folder.
	List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// Creates a ClickHouse cluster in the specified folder.
	Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified ClickHouse cluster.
	Update(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified ClickHouse cluster.
	Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Creates a backup for the specified ClickHouse cluster.
	Backup(ctx context.Context, in *BackupClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Creates a new ClickHouse cluster using the specified backup.
	Restore(ctx context.Context, in *RestoreClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves logs for the specified ClickHouse cluster.
	// For more information about logs, see the [Logs](/docs/yandex-mdb-guide/concepts/logs) section in the Developer's Guide.
	ListLogs(ctx context.Context, in *ListClusterLogsRequest, opts ...grpc.CallOption) (*ListClusterLogsResponse, error)
	// Retrieves the list of Operation resources for the specified cluster.
	ListOperations(ctx context.Context, in *ListClusterOperationsRequest, opts ...grpc.CallOption) (*ListClusterOperationsResponse, error)
	// Retrieves the list of available backups for the specified ClickHouse cluster.
	ListBackups(ctx context.Context, in *ListClusterBackupsRequest, opts ...grpc.CallOption) (*ListClusterBackupsResponse, error)
	// Retrieves a list of hosts for the specified cluster.
	ListHosts(ctx context.Context, in *ListClusterHostsRequest, opts ...grpc.CallOption) (*ListClusterHostsResponse, error)
	// Creates new hosts for a cluster.
	AddHosts(ctx context.Context, in *AddClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified hosts for a cluster.
	DeleteHosts(ctx context.Context, in *DeleteClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns the specified shard.
	GetShard(ctx context.Context, in *GetClusterShardRequest, opts ...grpc.CallOption) (*Shard, error)
	// Retrieves a list of shards.
	ListShards(ctx context.Context, in *ListClusterShardsRequest, opts ...grpc.CallOption) (*ListClusterShardsResponse, error)
	// Creates a new shard.
	AddShard(ctx context.Context, in *AddClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Modifies the specified shard.
	UpdateShard(ctx context.Context, in *UpdateClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified shard.
	DeleteShard(ctx context.Context, in *DeleteClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Update(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Backup(ctx context.Context, in *BackupClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Restore(ctx context.Context, in *RestoreClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListLogs(ctx context.Context, in *ListClusterLogsRequest, opts ...grpc.CallOption) (*ListClusterLogsResponse, error) {
	out := new(ListClusterLogsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListOperations(ctx context.Context, in *ListClusterOperationsRequest, opts ...grpc.CallOption) (*ListClusterOperationsResponse, error) {
	out := new(ListClusterOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListBackups(ctx context.Context, in *ListClusterBackupsRequest, opts ...grpc.CallOption) (*ListClusterBackupsResponse, error) {
	out := new(ListClusterBackupsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListHosts(ctx context.Context, in *ListClusterHostsRequest, opts ...grpc.CallOption) (*ListClusterHostsResponse, error) {
	out := new(ListClusterHostsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) AddHosts(ctx context.Context, in *AddClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/AddHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) DeleteHosts(ctx context.Context, in *DeleteClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/DeleteHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetShard(ctx context.Context, in *GetClusterShardRequest, opts ...grpc.CallOption) (*Shard, error) {
	out := new(Shard)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/GetShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListShards(ctx context.Context, in *ListClusterShardsRequest, opts ...grpc.CallOption) (*ListClusterShardsResponse, error) {
	out := new(ListClusterShardsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) AddShard(ctx context.Context, in *AddClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/AddShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) UpdateShard(ctx context.Context, in *UpdateClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/UpdateShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) DeleteShard(ctx context.Context, in *DeleteClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.clickhouse.v1.ClusterService/DeleteShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
type ClusterServiceServer interface {
	// Returns the specified ClickHouse Cluster resource.
	//
	// To get the list of available ClickHouse Cluster resources, make a [List] request.
	Get(context.Context, *GetClusterRequest) (*Cluster, error)
	// Retrieves a list of ClickHouse Cluster resources that belong
	// to the specified folder.
	List(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// Creates a ClickHouse cluster in the specified folder.
	Create(context.Context, *CreateClusterRequest) (*operation.Operation, error)
	// Updates the specified ClickHouse cluster.
	Update(context.Context, *UpdateClusterRequest) (*operation.Operation, error)
	// Deletes the specified ClickHouse cluster.
	Delete(context.Context, *DeleteClusterRequest) (*operation.Operation, error)
	// Creates a backup for the specified ClickHouse cluster.
	Backup(context.Context, *BackupClusterRequest) (*operation.Operation, error)
	// Creates a new ClickHouse cluster using the specified backup.
	Restore(context.Context, *RestoreClusterRequest) (*operation.Operation, error)
	// Retrieves logs for the specified ClickHouse cluster.
	// For more information about logs, see the [Logs](/docs/yandex-mdb-guide/concepts/logs) section in the Developer's Guide.
	ListLogs(context.Context, *ListClusterLogsRequest) (*ListClusterLogsResponse, error)
	// Retrieves the list of Operation resources for the specified cluster.
	ListOperations(context.Context, *ListClusterOperationsRequest) (*ListClusterOperationsResponse, error)
	// Retrieves the list of available backups for the specified ClickHouse cluster.
	ListBackups(context.Context, *ListClusterBackupsRequest) (*ListClusterBackupsResponse, error)
	// Retrieves a list of hosts for the specified cluster.
	ListHosts(context.Context, *ListClusterHostsRequest) (*ListClusterHostsResponse, error)
	// Creates new hosts for a cluster.
	AddHosts(context.Context, *AddClusterHostsRequest) (*operation.Operation, error)
	// Deletes the specified hosts for a cluster.
	DeleteHosts(context.Context, *DeleteClusterHostsRequest) (*operation.Operation, error)
	// Returns the specified shard.
	GetShard(context.Context, *GetClusterShardRequest) (*Shard, error)
	// Retrieves a list of shards.
	ListShards(context.Context, *ListClusterShardsRequest) (*ListClusterShardsResponse, error)
	// Creates a new shard.
	AddShard(context.Context, *AddClusterShardRequest) (*operation.Operation, error)
	// Modifies the specified shard.
	UpdateShard(context.Context, *UpdateClusterShardRequest) (*operation.Operation, error)
	// Deletes the specified shard.
	DeleteShard(context.Context, *DeleteClusterShardRequest) (*operation.Operation, error)
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Get(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).List(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Create(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Update(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Delete(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Backup(ctx, req.(*BackupClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Restore(ctx, req.(*RestoreClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListLogs(ctx, req.(*ListClusterLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListOperations(ctx, req.(*ListClusterOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListBackups(ctx, req.(*ListClusterBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListHosts(ctx, req.(*ListClusterHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_AddHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).AddHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/AddHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).AddHosts(ctx, req.(*AddClusterHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_DeleteHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).DeleteHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/DeleteHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).DeleteHosts(ctx, req.(*DeleteClusterHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/GetShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetShard(ctx, req.(*GetClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/ListShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListShards(ctx, req.(*ListClusterShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_AddShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).AddShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/AddShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).AddShard(ctx, req.(*AddClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_UpdateShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).UpdateShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/UpdateShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).UpdateShard(ctx, req.(*UpdateClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.clickhouse.v1.ClusterService/DeleteShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).DeleteShard(ctx, req.(*DeleteClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.mdb.clickhouse.v1.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClusterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClusterService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClusterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterService_Delete_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _ClusterService_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _ClusterService_Restore_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _ClusterService_ListLogs_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _ClusterService_ListOperations_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _ClusterService_ListBackups_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _ClusterService_ListHosts_Handler,
		},
		{
			MethodName: "AddHosts",
			Handler:    _ClusterService_AddHosts_Handler,
		},
		{
			MethodName: "DeleteHosts",
			Handler:    _ClusterService_DeleteHosts_Handler,
		},
		{
			MethodName: "GetShard",
			Handler:    _ClusterService_GetShard_Handler,
		},
		{
			MethodName: "ListShards",
			Handler:    _ClusterService_ListShards_Handler,
		},
		{
			MethodName: "AddShard",
			Handler:    _ClusterService_AddShard_Handler,
		},
		{
			MethodName: "UpdateShard",
			Handler:    _ClusterService_UpdateShard_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _ClusterService_DeleteShard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/mdb/clickhouse/v1/cluster_service.proto",
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/clickhouse/v1/cluster_service.proto", fileDescriptor_cluster_service_b9bfaff329d2f776)
}

var fileDescriptor_cluster_service_b9bfaff329d2f776 = []byte{
	// 2480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xee, 0x88, 0x12, 0x45, 0x3e, 0x3a, 0xb2, 0x3b, 0xb5, 0x1d, 0x7a, 0xfd, 0x13, 0x79, 0x93,
	0xd8, 0x32, 0x6d, 0x92, 0x22, 0x25, 0xcb, 0xa6, 0xfc, 0x13, 0x4b, 0xb4, 0xec, 0x10, 0x91, 0x6d,
	0x75, 0x25, 0x27, 0xa8, 0x0d, 0x97, 0x58, 0x72, 0x47, 0x14, 0x21, 0x72, 0x97, 0xe5, 0x2e, 0x65,
	0x4b, 0x86, 0x8b, 0xc0, 0x2d, 0x5a, 0xc0, 0xa7, 0x02, 0x05, 0x52, 0xc4, 0x05, 0x0a, 0xf4, 0xd2,
	0x1e, 0x8b, 0xea, 0x90, 0x02, 0x45, 0xd1, 0x43, 0x80, 0xc2, 0x2a, 0x0a, 0xb4, 0xa8, 0x72, 0xcc,
	0x35, 0x87, 0x9c, 0x8a, 0x22, 0xc7, 0x1e, 0x8a, 0x62, 0x66, 0x76, 0xc9, 0x5d, 0xfe, 0x68, 0x77,
	0x29, 0xb9, 0x4e, 0x81, 0xde, 0xb8, 0x33, 0xf3, 0xde, 0xbc, 0xef, 0xcd, 0xfb, 0x99, 0xf7, 0x86,
	0x30, 0xb9, 0x2e, 0xab, 0x0a, 0x79, 0x94, 0x2c, 0x56, 0xb4, 0x86, 0x92, 0xac, 0x2a, 0x85, 0x64,
	0xb1, 0x52, 0x2e, 0xae, 0xae, 0x68, 0x0d, 0x9d, 0x24, 0xd7, 0x52, 0xc9, 0x62, 0xa5, 0xa1, 0x1b,
	0xa4, 0x9e, 0xd7, 0x49, 0x7d, 0xad, 0x5c, 0x24, 0x89, 0x5a, 0x5d, 0x33, 0x34, 0x7c, 0x82, 0x53,
	0x25, 0x18, 0x55, 0xa2, 0xaa, 0x14, 0x12, 0x2d, 0xaa, 0xc4, 0x5a, 0x4a, 0x38, 0x56, 0xd2, 0xb4,
	0x52, 0x85, 0x24, 0xe5, 0x5a, 0x39, 0x29, 0xab, 0xaa, 0x66, 0xc8, 0x46, 0x59, 0x53, 0x75, 0x4e,
	0x2d, 0x8c, 0x9a, 0xb3, 0xec, 0xab, 0xd0, 0x58, 0x4e, 0x2e, 0x97, 0x49, 0x45, 0xc9, 0x57, 0x65,
	0x7d, 0xd5, 0x5c, 0xf1, 0x46, 0xfb, 0x0a, 0xa3, 0x5c, 0x25, 0xba, 0x21, 0x57, 0x6b, 0xe6, 0x82,
	0x13, 0xed, 0x0b, 0x1e, 0xd6, 0xe5, 0x5a, 0x8d, 0xd4, 0xad, 0x2d, 0x04, 0x13, 0x16, 0x15, 0x40,
	0xab, 0x91, 0x3a, 0xdb, 0xdf, 0x9c, 0x3b, 0xe5, 0x80, 0xdc, 0x9c, 0xed, 0x58, 0x77, 0xdc, 0xb1,
	0x6e, 0x4d, 0xae, 0x94, 0x15, 0xfb, 0xf4, 0x59, 0x17, 0xcd, 0x15, 0xe4, 0xe2, 0x6a, 0xc3, 0x92,
	0xf7, 0x9c, 0x37, 0x35, 0x9b, 0xab, 0xe3, 0x2e, 0xab, 0x15, 0xd9, 0x90, 0x0b, 0xb2, 0x6e, 0x9e,
	0x86, 0x70, 0xc6, 0x65, 0x79, 0x43, 0x6f, 0x72, 0x9e, 0x72, 0x93, 0x43, 0x53, 0x97, 0xcb, 0x25,
	0xdb, 0x20, 0xa7, 0x13, 0xaf, 0xc1, 0x37, 0x6f, 0x12, 0x23, 0xcb, 0xa5, 0x94, 0xc8, 0xf7, 0x1a,
	0x44, 0x37, 0xf0, 0x59, 0x00, 0xcb, 0x3c, 0xca, 0x4a, 0x14, 0x8d, 0xa2, 0xb1, 0xf0, 0xec, 0xbe,
	0x2f, 0x5f, 0xa4, 0xd0, 0xb3, 0xad, 0xd4, 0xe0, 0xe5, 0x2b, 0xe7, 0xc7, 0xa5, 0xb0, 0x39, 0x9f,
	0x53, 0xc4, 0xdf, 0x21, 0xf8, 0xd6, 0x7c, 0x59, 0xb7, 0x78, 0xe8, 0x16, 0x93, 0x33, 0x10, 0x5e,
	0xd6, 0x2a, 0x4a, 0x6f, 0x1e, 0x21, 0x3e, 0x9d, 0x53, 0xf0, 0x69, 0x08, 0xd7, 0xe4, 0x12, 0xc9,
	0xeb, 0xe5, 0x0d, 0x12, 0x1d, 0x18, 0x45, 0x63, 0x81, 0x59, 0xf8, 0xd7, 0x8b, 0x54, 0xf0, 0xf2,
	0x95, 0xd4, 0xf8, 0xf8, 0xb8, 0x14, 0xa2, 0x93, 0x8b, 0xe5, 0x0d, 0x82, 0xc7, 0x00, 0xd8, 0x42,
	0x43, 0x5b, 0x25, 0x6a, 0x34, 0xc0, 0x98, 0x86, 0x9f, 0x6d, 0xa5, 0x86, 0xd8, 0x4a, 0x89, 0x71,
	0x59, 0xa2, 0x73, 0x58, 0x84, 0xe0, 0x72, 0xb9, 0x62, 0x90, 0x7a, 0x74, 0x90, 0xad, 0x82, 0x67,
	0x5b, 0x4d, 0x7e, 0xe6, 0x8c, 0xf8, 0x03, 0x04, 0x07, 0x9d, 0x92, 0xeb, 0x35, 0x4d, 0xd5, 0x09,
	0xce, 0x42, 0xc8, 0xc4, 0xa7, 0x47, 0xd1, 0x68, 0x60, 0x2c, 0x92, 0x3e, 0x9d, 0xd8, 0xd9, 0x31,
	0x12, 0x96, 0x06, 0x9b, 0x84, 0xf8, 0x14, 0xec, 0x57, 0xc9, 0x23, 0x23, 0x6f, 0x13, 0x98, 0x42,
	0x0b, 0x4b, 0xaf, 0xd1, 0xe1, 0x05, 0x4b, 0x52, 0xf1, 0x27, 0xc3, 0x70, 0x30, 0x5b, 0x27, 0xb2,
	0x41, 0xda, 0x4e, 0xc1, 0x87, 0x02, 0xd3, 0x30, 0xa8, 0xca, 0x55, 0xae, 0xbb, 0xf0, 0xec, 0x09,
	0xba, 0xea, 0xab, 0x17, 0xa9, 0x91, 0xfb, 0x72, 0x7c, 0x63, 0x26, 0x7e, 0x6f, 0x3c, 0x9e, 0xc9,
	0xc7, 0x1f, 0xc4, 0x38, 0xdd, 0xd4, 0x84, 0xc4, 0xd6, 0xe2, 0xb3, 0x10, 0x51, 0x88, 0x5e, 0xac,
	0x97, 0x6b, 0xd4, 0xf6, 0x9d, 0xca, 0x4c, 0x9f, 0x9f, 0x92, 0xec, 0xb3, 0xf8, 0x63, 0x04, 0xc1,
	0x8a, 0x5c, 0x20, 0x15, 0x3d, 0x3a, 0xc8, 0x14, 0x72, 0xcd, 0x55, 0x21, 0x5d, 0x20, 0x25, 0xe6,
	0x19, 0x8b, 0x39, 0xd5, 0xa8, 0xaf, 0xcf, 0xbe, 0xf3, 0xd5, 0x8b, 0x54, 0xe4, 0x7e, 0x3c, 0x3f,
	0x1e, 0xcf, 0xc8, 0xf1, 0x8d, 0x07, 0xb1, 0xa7, 0x5c, 0xbc, 0x49, 0x4b, 0xcc, 0xcd, 0xad, 0x54,
	0x50, 0xb0, 0x7e, 0x61, 0x7c, 0x80, 0x82, 0x79, 0x60, 0x5b, 0x2f, 0x99, 0x02, 0xe1, 0xfb, 0x10,
	0x21, 0xea, 0x5a, 0xb9, 0xae, 0xa9, 0x55, 0xa2, 0x1a, 0xd1, 0xa1, 0x51, 0x34, 0x36, 0x92, 0x9e,
	0xf0, 0x78, 0x60, 0x89, 0xb9, 0x16, 0xe9, 0xec, 0x20, 0x55, 0x9c, 0x64, 0xe7, 0x86, 0xbf, 0x0d,
	0x11, 0xee, 0x3a, 0x79, 0xbd, 0x46, 0x8a, 0xd1, 0xe0, 0x28, 0x1a, 0x8b, 0xa4, 0x63, 0xae, 0xcc,
	0x19, 0xc9, 0x62, 0x8d, 0x14, 0x4d, 0x9e, 0x50, 0x6c, 0x8e, 0xe0, 0xfb, 0x30, 0x62, 0xf9, 0x39,
	0x63, 0xaa, 0x47, 0x87, 0x99, 0x4a, 0xcf, 0xb9, 0x71, 0xbd, 0x6e, 0x52, 0x31, 0xbe, 0xc1, 0xa7,
	0x5b, 0xa9, 0x81, 0xab, 0xe3, 0xd2, 0x6b, 0x8a, 0x6d, 0x54, 0xc7, 0x77, 0x00, 0x68, 0x54, 0x30,
	0x19, 0x87, 0x18, 0xe3, 0x31, 0x37, 0xc6, 0x77, 0x75, 0x52, 0x77, 0x30, 0x0d, 0x37, 0xcc, 0x11,
	0xc6, 0x70, 0x45, 0xd3, 0x0d, 0x93, 0x61, 0xd8, 0x1b, 0xc3, 0x77, 0x35, 0xdd, 0x70, 0x32, 0x5c,
	0x31, 0x47, 0x74, 0x1a, 0x5c, 0x54, 0x62, 0x3c, 0xd4, 0xea, 0xab, 0xd4, 0xae, 0xa1, 0x5b, 0x70,
	0x31, 0xe7, 0x73, 0x0a, 0xce, 0x00, 0xe8, 0x2b, 0x72, 0x5d, 0xc9, 0x33, 0xf3, 0x8e, 0xb0, 0xc5,
	0xc2, 0x0e, 0xa6, 0x1d, 0x66, 0xab, 0x6f, 0xcb, 0x55, 0x22, 0x64, 0x20, 0x62, 0x33, 0x37, 0x7c,
	0x00, 0x02, 0xab, 0x64, 0x9d, 0xfb, 0x91, 0x44, 0x7f, 0xe2, 0x83, 0x30, 0xb4, 0x26, 0x57, 0x1a,
	0xa6, 0xd7, 0x48, 0xfc, 0x63, 0x7a, 0xe0, 0x22, 0x12, 0xa7, 0xe0, 0x90, 0xc3, 0x7c, 0x6f, 0x11,
	0x43, 0xa6, 0x6a, 0xc6, 0xc7, 0x3b, 0x03, 0xa3, 0x3d, 0x14, 0xfe, 0x3d, 0x00, 0x07, 0xef, 0xd6,
	0x94, 0x4e, 0x57, 0xf6, 0x13, 0x50, 0xf1, 0x25, 0x88, 0x34, 0x18, 0x13, 0x96, 0x38, 0x99, 0x74,
	0x91, 0xb4, 0x90, 0xe0, 0x89, 0x31, 0x61, 0x25, 0xc6, 0xc4, 0x0d, 0x9a, 0x5b, 0x6f, 0xc9, 0xfa,
	0xaa, 0x04, 0x7c, 0x39, 0xfd, 0xfd, 0xb2, 0xbd, 0xba, 0x1b, 0xba, 0x97, 0xe3, 0xd5, 0xef, 0x39,
	0x1d, 0x6f, 0xc8, 0xaf, 0xe3, 0xd9, 0x5d, 0x6e, 0x97, 0xb6, 0xe0, 0x00, 0xed, 0xd5, 0x16, 0xb2,
	0x70, 0xf0, 0x3a, 0xa9, 0x90, 0x5d, 0x99, 0x02, 0xdd, 0xdc, 0xc1, 0xc4, 0xc7, 0xe6, 0xb3, 0xec,
	0x96, 0xb2, 0xcb, 0xcd, 0x1d, 0x4c, 0xbc, 0x6e, 0xfe, 0xcb, 0x21, 0x38, 0x24, 0x11, 0xdd, 0xd0,
	0xea, 0xed, 0xd8, 0x4f, 0x42, 0x98, 0x5f, 0x9e, 0x5a, 0xbb, 0xf3, 0xf0, 0x18, 0xe2, 0xc3, 0xff,
	0x8d, 0x4c, 0xf6, 0xbc, 0xdd, 0xe6, 0x67, 0xdc, 0x6c, 0xaa, 0x2b, 0x96, 0xff, 0xa7, 0x32, 0x9a,
	0xca, 0x9c, 0xc9, 0x61, 0x78, 0xaf, 0x93, 0x43, 0x68, 0xc7, 0xe4, 0xb0, 0x1b, 0xaf, 0x5e, 0x82,
	0xc3, 0xce, 0x63, 0xf5, 0x68, 0xdc, 0xf8, 0xa8, 0xdd, 0x84, 0x39, 0xdb, 0xa6, 0xf1, 0x8a, 0x9f,
	0x21, 0x08, 0xcf, 0x6b, 0x25, 0x89, 0x14, 0xb5, 0xba, 0x82, 0x2f, 0x42, 0xb8, 0x59, 0xdd, 0x30,
	0x46, 0xdd, 0xa2, 0xf8, 0x92, 0xb5, 0x42, 0x6a, 0x2d, 0xc6, 0x0b, 0x30, 0x5c, 0x25, 0xba, 0x2e,
	0x97, 0xa8, 0xe4, 0x54, 0xa7, 0x53, 0x6e, 0x3a, 0x6d, 0xee, 0x9a, 0xb8, 0xc5, 0x09, 0x99, 0x4a,
	0x24, 0x8b, 0x8d, 0x30, 0x0d, 0xfb, 0xec, 0x13, 0xbe, 0x74, 0xf5, 0xb7, 0x00, 0x1c, 0xb6, 0x5d,
	0x93, 0xe7, 0xb5, 0x92, 0xde, 0x57, 0x5e, 0x7b, 0x13, 0x5e, 0x2b, 0x6a, 0x95, 0x46, 0x55, 0xcd,
	0x9b, 0x37, 0x73, 0x8a, 0x2d, 0x2c, 0xed, 0xe3, 0x83, 0x37, 0xd8, 0x18, 0x26, 0xb0, 0xcf, 0xac,
	0x48, 0xf3, 0xc6, 0x7a, 0x8d, 0x30, 0x67, 0x1e, 0x49, 0xcf, 0xba, 0xe2, 0xef, 0x2a, 0x5f, 0x62,
	0x91, 0xb3, 0x5a, 0x5a, 0xaf, 0x11, 0x29, 0xa2, 0xb7, 0x3e, 0xf0, 0x05, 0x08, 0x2f, 0xd7, 0xb5,
	0x6a, 0x9e, 0xea, 0x9c, 0x55, 0x08, 0x3b, 0x9f, 0x4d, 0x88, 0x2e, 0xa6, 0x9f, 0x78, 0x02, 0x86,
	0x0d, 0x8d, 0x93, 0x0d, 0xb9, 0x92, 0x05, 0x0d, 0x8d, 0x11, 0x39, 0xea, 0x9b, 0xa0, 0xe7, 0xfa,
	0x66, 0xb8, 0x77, 0x7d, 0x23, 0x5e, 0x82, 0x88, 0x0d, 0x1c, 0x3e, 0x06, 0xd1, 0xc5, 0x39, 0xe9,
	0xfd, 0x5c, 0x76, 0x2e, 0xbf, 0xf4, 0x9d, 0x85, 0xb9, 0xfc, 0xdd, 0xdb, 0x8b, 0x0b, 0x73, 0xd9,
	0xdc, 0x8d, 0xdc, 0xdc, 0xf5, 0x03, 0xdf, 0xc0, 0x23, 0x00, 0xd9, 0xf9, 0x5c, 0xf6, 0xbd, 0x77,
	0xef, 0xdc, 0x5d, 0x9c, 0x3b, 0x80, 0xc4, 0x0f, 0x11, 0xbc, 0xde, 0xa1, 0x31, 0xb3, 0xf6, 0xb9,
	0x02, 0x83, 0x15, 0xad, 0x64, 0xd5, 0x3d, 0x67, 0x3c, 0x1b, 0x9e, 0xc4, 0xc8, 0x3c, 0x57, 0x3d,
	0xbf, 0x40, 0x70, 0xcc, 0x26, 0xc2, 0x1d, 0xab, 0x44, 0xef, 0xcf, 0xb4, 0xf6, 0xbe, 0x80, 0x14,
	0x9f, 0x21, 0x38, 0xde, 0x43, 0x40, 0x53, 0x53, 0x33, 0x00, 0xcd, 0xce, 0x82, 0xa5, 0xaf, 0x93,
	0x4e, 0x7d, 0xb5, 0x3a, 0x0f, 0x4d, 0x7a, 0xc9, 0x46, 0xe4, 0x59, 0x5b, 0x3f, 0x47, 0x70, 0xc4,
	0x26, 0x0c, 0x4f, 0xcb, 0x5f, 0x1b, 0x55, 0xfd, 0x08, 0x81, 0xd0, 0x4d, 0x3a, 0x53, 0x4f, 0xd7,
	0x60, 0x98, 0x47, 0x48, 0x4b, 0x49, 0xa7, 0xdc, 0x8c, 0x8a, 0x73, 0x90, 0x2c, 0x32, 0xcf, 0x6a,
	0xfa, 0xd8, 0x69, 0xd7, 0x34, 0xd1, 0x7c, 0x6d, 0x94, 0xf4, 0x7d, 0x88, 0x76, 0x8a, 0x66, 0x6a,
	0x68, 0x1a, 0x86, 0x68, 0x0a, 0xb4, 0xf4, 0xf3, 0x96, 0x97, 0x0c, 0x2a, 0x71, 0x12, 0xcf, 0xba,
	0xf9, 0x08, 0xc1, 0xe1, 0x19, 0x45, 0xd9, 0xb5, 0x6a, 0x9c, 0x29, 0x7f, 0x60, 0xd7, 0x29, 0x5f,
	0xfc, 0x00, 0x5e, 0x6f, 0x93, 0xcb, 0x6b, 0x2e, 0x3e, 0x6e, 0x8a, 0x42, 0x2f, 0x81, 0xba, 0x99,
	0x4d, 0x18, 0x63, 0x5a, 0xff, 0xe9, 0xe2, 0x23, 0x38, 0xe2, 0xb8, 0x3c, 0xf7, 0x8f, 0x39, 0xd1,
	0xb9, 0xd1, 0xec, 0x7e, 0x8e, 0xc4, 0xba, 0x65, 0x4e, 0xd8, 0x77, 0xbe, 0x07, 0x42, 0xe7, 0xce,
	0x7b, 0x84, 0xea, 0x87, 0x08, 0x0e, 0xb7, 0x3a, 0x76, 0x8b, 0xb4, 0xdc, 0xed, 0x0b, 0xd3, 0x15,
	0x47, 0x65, 0xed, 0xed, 0xba, 0xdd, 0xaa, 0xae, 0xc5, 0xe7, 0xc8, 0x61, 0xcf, 0x4c, 0x8e, 0xbd,
	0xf5, 0xb5, 0xf1, 0x78, 0xdf, 0xbe, 0xf6, 0xd4, 0x19, 0x2e, 0x2d, 0xe1, 0x9a, 0x19, 0x2e, 0xc8,
	0x70, 0x58, 0xee, 0xf6, 0xb6, 0x9b, 0xf5, 0x72, 0x25, 0x9b, 0x44, 0x9e, 0x1d, 0xee, 0xd7, 0x03,
	0x76, 0x87, 0x7b, 0x55, 0x07, 0x85, 0x17, 0x9c, 0xb7, 0xfe, 0x00, 0xbb, 0xb4, 0x24, 0x3d, 0x41,
	0xee, 0x5e, 0x4c, 0xb7, 0x45, 0x80, 0xc1, 0x3d, 0x8e, 0x00, 0x6c, 0x67, 0x1f, 0xbe, 0xd2, 0xae,
	0x1b, 0xbb, 0x91, 0x7e, 0x34, 0x00, 0x47, 0x1c, 0xc5, 0xfb, 0x2b, 0x3b, 0x85, 0xb6, 0x9e, 0x4e,
	0xc0, 0x57, 0x4f, 0xa7, 0xed, 0x08, 0x07, 0x77, 0x7d, 0x84, 0x34, 0x40, 0x75, 0xea, 0x65, 0x8f,
	0x94, 0xfe, 0x63, 0xd4, 0x16, 0x77, 0x5f, 0x59, 0x8c, 0x6a, 0x0f, 0xc3, 0x7b, 0x89, 0xf2, 0xdf,
	0x08, 0x42, 0x96, 0x4d, 0xe3, 0x93, 0x30, 0xbc, 0xa1, 0xa9, 0xa4, 0x85, 0x28, 0xd4, 0x44, 0x13,
	0xa4, 0x13, 0x39, 0x05, 0x67, 0x61, 0x90, 0xd5, 0x33, 0x03, 0xac, 0x9e, 0x39, 0xe3, 0xc5, 0x5d,
	0x12, 0xf4, 0x66, 0x6f, 0x16, 0xdd, 0x8c, 0x18, 0xbf, 0x0d, 0x61, 0xbd, 0x51, 0x50, 0x89, 0x41,
	0x77, 0x0a, 0xb4, 0xed, 0x14, 0xe2, 0x53, 0x39, 0x05, 0x8f, 0xc1, 0x01, 0x59, 0xd7, 0xcb, 0x25,
	0x35, 0x5f, 0x6b, 0x14, 0x2a, 0xe5, 0x62, 0xbe, 0x5c, 0x63, 0x46, 0x13, 0x92, 0x46, 0xf8, 0xf8,
	0x02, 0x1b, 0xce, 0xd5, 0xda, 0xda, 0xab, 0x43, 0x3e, 0xda, 0xab, 0xe2, 0x27, 0x01, 0x80, 0x96,
	0x75, 0xe1, 0xbb, 0x54, 0x9b, 0x16, 0x02, 0xb3, 0xda, 0x3d, 0xef, 0xbd, 0xb7, 0x90, 0xc8, 0x36,
	0x27, 0x24, 0x1b, 0x23, 0x2c, 0x41, 0x78, 0x43, 0xd3, 0x56, 0x09, 0xa9, 0xb1, 0x7a, 0x91, 0x72,
	0x9d, 0xf4, 0xc1, 0xf5, 0x9e, 0x45, 0x2b, 0xb5, 0xd8, 0x08, 0xbf, 0x42, 0x00, 0xad, 0xed, 0xf0,
	0x1d, 0x08, 0x72, 0xcf, 0x30, 0xa5, 0xbe, 0xe0, 0xc6, 0x9f, 0xaf, 0xb6, 0x49, 0xcc, 0x37, 0x94,
	0x4c, 0x36, 0xf8, 0x26, 0x84, 0xeb, 0x44, 0xd7, 0x1a, 0xf5, 0x22, 0xcb, 0xdf, 0xc8, 0x4b, 0x19,
	0x25, 0x59, 0x04, 0x52, 0x8b, 0x56, 0x58, 0x82, 0x70, 0x13, 0x80, 0x93, 0x2b, 0xea, 0x9f, 0xab,
	0xf8, 0x97, 0x01, 0xd8, 0xdf, 0x16, 0x1b, 0xf0, 0xbd, 0x2e, 0xa7, 0x37, 0xed, 0x33, 0xc0, 0xf4,
	0x38, 0x42, 0xe1, 0xf3, 0xff, 0x11, 0x75, 0xe3, 0x09, 0x08, 0x3e, 0x24, 0xe5, 0xd2, 0x8a, 0x61,
	0x86, 0xe7, 0xa3, 0x1d, 0xe1, 0x39, 0xa7, 0x1a, 0x53, 0x93, 0xef, 0xcb, 0x95, 0x06, 0x91, 0xcc,
	0xa5, 0xe9, 0x7f, 0x1e, 0x85, 0x11, 0x2b, 0xbc, 0xf0, 0x7a, 0x1c, 0xff, 0x0c, 0x41, 0xe0, 0x26,
	0x31, 0x70, 0xca, 0x4d, 0x8a, 0x8e, 0x87, 0x57, 0xc1, 0xeb, 0x33, 0xa3, 0x38, 0xf9, 0xf4, 0xb3,
	0x2f, 0x7e, 0x3a, 0x90, 0xc0, 0xe7, 0x92, 0x55, 0x59, 0x95, 0x4b, 0x44, 0x89, 0x77, 0x7d, 0x76,
	0xd6, 0x93, 0x8f, 0x5b, 0x31, 0xee, 0x09, 0x7e, 0x8e, 0x60, 0x90, 0xde, 0x8b, 0xf0, 0x84, 0x8f,
	0x7e, 0x8a, 0x75, 0xab, 0x13, 0x26, 0xfd, 0x11, 0xf1, 0xdb, 0x96, 0x78, 0x9a, 0x49, 0x7a, 0x12,
	0xbf, 0xe1, 0x22, 0x29, 0xfe, 0x2d, 0x82, 0x20, 0x7f, 0x75, 0xc1, 0x93, 0xfd, 0x3c, 0x2e, 0x0a,
	0xee, 0xb5, 0xb7, 0x78, 0x7b, 0x73, 0x3b, 0x36, 0xda, 0xeb, 0x71, 0x67, 0xd8, 0x1c, 0x60, 0x02,
	0xbf, 0x25, 0xba, 0x09, 0x3c, 0x8d, 0x62, 0xf8, 0x8f, 0x08, 0x82, 0x3c, 0x91, 0xba, 0xcb, 0xdc,
	0xed, 0xe9, 0xc4, 0x8b, 0xcc, 0xf7, 0xb9, 0xcc, 0xdd, 0x1f, 0x21, 0x1c, 0x32, 0xa7, 0xd2, 0xbe,
	0xcc, 0x81, 0x02, 0xf8, 0x33, 0x82, 0x20, 0xcf, 0x91, 0xee, 0x00, 0xba, 0x3d, 0x67, 0x78, 0x01,
	0xb0, 0xbc, 0xb9, 0x1d, 0x4b, 0xf4, 0x7a, 0xc8, 0x38, 0xd4, 0xee, 0x63, 0x73, 0xd5, 0x9a, 0xb1,
	0xce, 0xad, 0x3b, 0xe6, 0xcf, 0xba, 0x3f, 0x45, 0x10, 0xe4, 0x9d, 0x03, 0x77, 0x2c, 0xdd, 0x5e,
	0x47, 0xbc, 0x60, 0xc9, 0xf3, 0xc3, 0xe8, 0xfe, 0x2e, 0xe2, 0x38, 0x8c, 0xf3, 0xe2, 0x84, 0xaf,
	0xc3, 0xe0, 0xbd, 0x0e, 0xfc, 0x07, 0x04, 0xc3, 0x66, 0x67, 0x1a, 0x9f, 0xef, 0xeb, 0x65, 0xc2,
	0x0b, 0x8c, 0x0f, 0x36, 0xb7, 0x63, 0x27, 0x7b, 0xb6, 0xc0, 0x1d, 0x38, 0xce, 0x89, 0xa7, 0xdd,
	0x1c, 0xa1, 0xce, 0xd9, 0x50, 0x7b, 0xfa, 0x04, 0x41, 0x88, 0x86, 0x81, 0x79, 0xad, 0xa4, 0xe3,
	0xa9, 0xfe, 0xba, 0xb6, 0xc2, 0x05, 0xdf, 0x74, 0x66, 0xac, 0xc9, 0x30, 0x89, 0x27, 0x70, 0xca,
	0x97, 0xe6, 0x59, 0xdf, 0xf2, 0xaf, 0x08, 0x46, 0x28, 0xdb, 0x56, 0x9f, 0x0f, 0x5f, 0xf6, 0x21,
	0x46, 0x47, 0xff, 0x52, 0xb8, 0xd2, 0x27, 0xb5, 0x09, 0xe5, 0x1d, 0x06, 0x25, 0x83, 0x2f, 0xf8,
	0x81, 0x92, 0xb4, 0xb5, 0x16, 0x3f, 0x45, 0x10, 0xa1, 0x5b, 0x98, 0xdd, 0x38, 0x9c, 0xf1, 0x21,
	0x8f, 0xb3, 0xbf, 0x28, 0x4c, 0xf7, 0x43, 0x6a, 0xe2, 0xb8, 0xcc, 0x70, 0x4c, 0xe1, 0x49, 0x5f,
	0x38, 0xac, 0xc6, 0xdf, 0xef, 0x11, 0x84, 0x29, 0x73, 0xd6, 0x40, 0xc1, 0x7e, 0xec, 0xc2, 0xde,
	0xec, 0x11, 0x2e, 0xfa, 0x27, 0x34, 0xc5, 0x9f, 0x66, 0xe2, 0x4f, 0xe2, 0xb4, 0x2f, 0xf1, 0x79,
	0x67, 0xee, 0x0b, 0x04, 0xa1, 0x19, 0x45, 0xe1, 0xb2, 0xbb, 0xfa, 0x42, 0xf7, 0xde, 0x9c, 0x17,
	0x67, 0x7e, 0xb2, 0xb9, 0x1d, 0x1b, 0xef, 0xdd, 0x44, 0xdb, 0x21, 0xc2, 0x66, 0xc5, 0xab, 0xfe,
	0x71, 0x4d, 0x17, 0x64, 0xa3, 0xb8, 0xc2, 0x53, 0x28, 0x75, 0xf9, 0x7f, 0x20, 0x88, 0xf0, 0xd8,
	0xce, 0x91, 0x66, 0x7c, 0xe5, 0x11, 0xbf, 0x60, 0x3f, 0x44, 0x9b, 0xdb, 0xb1, 0x89, 0x1d, 0xfb,
	0x6b, 0x2f, 0x07, 0x30, 0xdf, 0x90, 0x02, 0xfe, 0x0d, 0x82, 0xd0, 0x4d, 0x62, 0xb0, 0xeb, 0xaf,
	0xfb, 0xb9, 0x76, 0xef, 0xd5, 0x09, 0xde, 0x9a, 0x4e, 0xe2, 0x75, 0x26, 0xf6, 0x55, 0x7c, 0xb9,
	0xf7, 0x5f, 0x0b, 0xdb, 0x44, 0xe6, 0x5d, 0xaa, 0xe4, 0xe3, 0x56, 0x5d, 0xf7, 0x84, 0xba, 0x11,
	0x50, 0x13, 0xe7, 0x8d, 0x30, 0xec, 0xc7, 0x1d, 0x1c, 0x8d, 0x3d, 0x21, 0xd3, 0x07, 0xa5, 0xe9,
	0x49, 0x17, 0xf8, 0x15, 0x05, 0x27, 0x7d, 0x22, 0xc1, 0x7f, 0xe2, 0x6e, 0xe4, 0x51, 0xdd, 0xdd,
	0x3b, 0x6e, 0x5e, 0x2c, 0xeb, 0xbb, 0x2c, 0xb5, 0xf7, 0xec, 0x44, 0x0d, 0xb1, 0x4f, 0x1e, 0x0e,
	0x44, 0xbf, 0x20, 0xa8, 0xd9, 0x7c, 0x8e, 0x20, 0xc2, 0x2f, 0x71, 0x1c, 0x4a, 0xc6, 0xd7, 0x85,
	0xd1, 0x2f, 0x1a, 0x75, 0x73, 0x3b, 0xf6, 0xe6, 0x8e, 0x5d, 0x1e, 0x1b, 0xa0, 0x99, 0xf4, 0xae,
	0xec, 0x8b, 0xa2, 0xfb, 0xb2, 0x19, 0x05, 0x3c, 0xa2, 0xeb, 0xd9, 0x22, 0xf2, 0x82, 0xee, 0x71,
	0x97, 0x20, 0xe0, 0x44, 0xb7, 0x43, 0x10, 0xb8, 0x1a, 0xdb, 0x15, 0xda, 0xd9, 0x3b, 0xf7, 0x6e,
	0x95, 0xca, 0xc6, 0x4a, 0xa3, 0x90, 0x28, 0x6a, 0xd5, 0x24, 0x97, 0x35, 0xce, 0xff, 0x77, 0x5b,
	0xd2, 0xe2, 0x25, 0xa2, 0xb2, 0x3d, 0x93, 0x3b, 0xff, 0x21, 0xf7, 0x52, 0xeb, 0xab, 0x10, 0x64,
	0x04, 0x13, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x34, 0xf3, 0x2b, 0x63, 0xb3, 0x2d, 0x00, 0x00,
}
